// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppThread.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dsc_
List dsc_(const arma::vec& y, const arma::mat& point_forecasts, const arma::mat& variance_forecasts, arma::rowvec gamma_grid, arma::irowvec psi_grid, double delta, int burn_in, int burn_in_dsc, int metric, bool equal_weight, Nullable<IntegerVector> incl_, Nullable<NumericVector> portfolio_params_);
RcppExport SEXP _hdflex_dsc_(SEXP ySEXP, SEXP point_forecastsSEXP, SEXP variance_forecastsSEXP, SEXP gamma_gridSEXP, SEXP psi_gridSEXP, SEXP deltaSEXP, SEXP burn_inSEXP, SEXP burn_in_dscSEXP, SEXP metricSEXP, SEXP equal_weightSEXP, SEXP incl_SEXP, SEXP portfolio_params_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type point_forecasts(point_forecastsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type variance_forecasts(variance_forecastsSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type gamma_grid(gamma_gridSEXP);
    Rcpp::traits::input_parameter< arma::irowvec >::type psi_grid(psi_gridSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in_dsc(burn_in_dscSEXP);
    Rcpp::traits::input_parameter< int >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type equal_weight(equal_weightSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type incl_(incl_SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type portfolio_params_(portfolio_params_SEXP);
    rcpp_result_gen = Rcpp::wrap(dsc_(y, point_forecasts, variance_forecasts, gamma_grid, psi_grid, delta, burn_in, burn_in_dsc, metric, equal_weight, incl_, portfolio_params_));
    return rcpp_result_gen;
END_RCPP
}
// stsc_loop_
List stsc_loop_(const arma::vec& y, Nullable<const NumericMatrix&> X_, Nullable<const NumericMatrix&> Ext_F_, int init, arma::vec lambda_grid, arma::vec kappa_grid, bool bias, arma::rowvec gamma_grid, arma::irowvec psi_grid, double delta, int burn_in, int burn_in_dsc, int metric, bool equal_weight, Nullable<IntegerVector> incl_, Nullable<NumericVector> portfolio_params_);
RcppExport SEXP _hdflex_stsc_loop_(SEXP ySEXP, SEXP X_SEXP, SEXP Ext_F_SEXP, SEXP initSEXP, SEXP lambda_gridSEXP, SEXP kappa_gridSEXP, SEXP biasSEXP, SEXP gamma_gridSEXP, SEXP psi_gridSEXP, SEXP deltaSEXP, SEXP burn_inSEXP, SEXP burn_in_dscSEXP, SEXP metricSEXP, SEXP equal_weightSEXP, SEXP incl_SEXP, SEXP portfolio_params_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Nullable<const NumericMatrix&> >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< Nullable<const NumericMatrix&> >::type Ext_F_(Ext_F_SEXP);
    Rcpp::traits::input_parameter< int >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_grid(lambda_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa_grid(kappa_gridSEXP);
    Rcpp::traits::input_parameter< bool >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type gamma_grid(gamma_gridSEXP);
    Rcpp::traits::input_parameter< arma::irowvec >::type psi_grid(psi_gridSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in_dsc(burn_in_dscSEXP);
    Rcpp::traits::input_parameter< int >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type equal_weight(equal_weightSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type incl_(incl_SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type portfolio_params_(portfolio_params_SEXP);
    rcpp_result_gen = Rcpp::wrap(stsc_loop_(y, X_, Ext_F_, init, lambda_grid, kappa_grid, bias, gamma_grid, psi_grid, delta, burn_in, burn_in_dsc, metric, equal_weight, incl_, portfolio_params_));
    return rcpp_result_gen;
END_RCPP
}
// stsc_loop_par_
List stsc_loop_par_(const arma::vec& y, Nullable<const NumericMatrix&> X_, Nullable<const NumericMatrix&> Ext_F_, int init, arma::vec lambda_grid, arma::vec kappa_grid, bool bias, arma::rowvec gamma_grid, arma::irowvec psi_grid, double delta, int burn_in, int burn_in_dsc, int metric, bool equal_weight, Nullable<IntegerVector> incl_, int n_threads, Nullable<NumericVector> portfolio_params_);
RcppExport SEXP _hdflex_stsc_loop_par_(SEXP ySEXP, SEXP X_SEXP, SEXP Ext_F_SEXP, SEXP initSEXP, SEXP lambda_gridSEXP, SEXP kappa_gridSEXP, SEXP biasSEXP, SEXP gamma_gridSEXP, SEXP psi_gridSEXP, SEXP deltaSEXP, SEXP burn_inSEXP, SEXP burn_in_dscSEXP, SEXP metricSEXP, SEXP equal_weightSEXP, SEXP incl_SEXP, SEXP n_threadsSEXP, SEXP portfolio_params_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Nullable<const NumericMatrix&> >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< Nullable<const NumericMatrix&> >::type Ext_F_(Ext_F_SEXP);
    Rcpp::traits::input_parameter< int >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambda_grid(lambda_gridSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa_grid(kappa_gridSEXP);
    Rcpp::traits::input_parameter< bool >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type gamma_grid(gamma_gridSEXP);
    Rcpp::traits::input_parameter< arma::irowvec >::type psi_grid(psi_gridSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in_dsc(burn_in_dscSEXP);
    Rcpp::traits::input_parameter< int >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type equal_weight(equal_weightSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type incl_(incl_SEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type portfolio_params_(portfolio_params_SEXP);
    rcpp_result_gen = Rcpp::wrap(stsc_loop_par_(y, X_, Ext_F_, init, lambda_grid, kappa_grid, bias, gamma_grid, psi_grid, delta, burn_in, burn_in_dsc, metric, equal_weight, incl_, n_threads, portfolio_params_));
    return rcpp_result_gen;
END_RCPP
}
// tvc_
List tvc_(const arma::vec& y, Nullable<const NumericMatrix&> X_, Nullable<const NumericMatrix&> Ext_F_, int init, const arma::vec& lambda_grid, const arma::vec& kappa_grid, bool bias);
RcppExport SEXP _hdflex_tvc_(SEXP ySEXP, SEXP X_SEXP, SEXP Ext_F_SEXP, SEXP initSEXP, SEXP lambda_gridSEXP, SEXP kappa_gridSEXP, SEXP biasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Nullable<const NumericMatrix&> >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< Nullable<const NumericMatrix&> >::type Ext_F_(Ext_F_SEXP);
    Rcpp::traits::input_parameter< int >::type init(initSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda_grid(lambda_gridSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kappa_grid(kappa_gridSEXP);
    Rcpp::traits::input_parameter< bool >::type bias(biasSEXP);
    rcpp_result_gen = Rcpp::wrap(tvc_(y, X_, Ext_F_, init, lambda_grid, kappa_grid, bias));
    return rcpp_result_gen;
END_RCPP
}
